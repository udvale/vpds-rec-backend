[
  {
    "component": "Accordion",
    "description": "A collapsible panel that lets users show or hide sections of content. Great for FAQs or settings pages where keeping everything visible would be overwhelming.",
    "category": "Layout",
    "tags": [
      "accordion",
      "collapsible",
      "expand",
      "hide",
      "FAQ",
      "settings",
      "toggle"
    ],
    "variants": [
      {
        "name": "Accordion",
        "description": "Single standalone accordion section for showing or hiding one block of content.",
        "code": "import { Accordion, AccordionHeading, AccordionPanel, AccordionToggleIcon, Typography } from '@visa/nova-react';\n\nexport const CollapsedAccordion = () => {\n  return (\n    <Accordion>\n      <AccordionHeading buttonSize=\"large\" colorScheme=\"secondary\">\n        <AccordionToggleIcon />\n        Accordion title\n      </AccordionHeading>\n      <AccordionPanel>\n        <Typography>This is required text that describes the accordion section in more detail.</Typography>\n      </AccordionPanel>\n    </Accordion>\n  );\n};"
      },
      {
        "name": "Multi-select accordion group",
        "description": "Stack of independent accordions where several sections may be open simultaneously; useful for long FAQ lists.",
        "code": "import {\n  Accordion,\n  AccordionHeading,\n  AccordionPanel,\n  AccordionToggleIcon,\n  Typography,\n  Utility,\n} from '@visa/nova-react';\n\nconst accordions = [\n  {\n    content: 'This is required text that describes the accordion section in more detail.',\n    header: 'Accordion title 1',\n  },\n  {\n    content: 'This is required text that describes the accordion section in more detail.',\n    header: 'Accordion title 2',\n  },\n  {\n    content: 'This is required text that describes the accordion section in more detail.',\n    header: 'Accordion title 3',\n  },\n];\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-multi-select-accordion-group-example';\n\nexport const DefaultMultiSelectAccordionGroup = () => {\n  return (\n    <Utility vFlex vFlexCol vGap={6}>\n      {accordions.map((accordion, index) => (\n        <Accordion key={`${id}-${index}`}>\n          <AccordionHeading buttonSize=\"large\" colorScheme=\"secondary\">\n            <AccordionToggleIcon />\n            {accordion.header}\n          </AccordionHeading>\n          <AccordionPanel>\n            <Typography>{accordion.content}</Typography>\n          </AccordionPanel>\n        </Accordion>\n      ))}\n    </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Anchor link menu",
    "description": "A navigation component that provides quick access to different sections within a page or document. Allows users to jump to specific content areas efficiently.",
    "category": "Navigation",
    "tags": [
      "navigation",
      "menu",
      "anchor",
      "jump",
      "section",
      "page navigation",
      "quick access",
      "internal links",
      "table of contents"
    ],
    "variants": [
      {
        "name": "Anchor link menu",
        "description": "A vertical menu with anchor links that allow users to navigate to different sections of a page",
        "code": "import { AnchorLinkMenu, AnchorLinkMenuHeader, Link, Typography } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-anchor-link-menu';\n\nexport const DefaultAnchorLinkMenu = () => {\n  return (\n    <AnchorLinkMenu aria-labelledby={`${id}-header`}>\n      <section>\n        <AnchorLinkMenuHeader>\n          <Typography id={`${id}-header`} tag=\"h2\" variant=\"overline\">\n            Section title\n          </Typography>\n        </AnchorLinkMenuHeader>\n        <ul>\n          <li>\n            <Link aria-current=\"true\" href=\"./anchor-link-menu\">\n              L1 label 1\n            </Link>\n          </li>\n          <li>\n            <Link href=\"./anchor-link-menu\">L1 label 2</Link>\n          </li>\n          <li>\n            <Link href=\"./anchor-link-menu\">L1 label 3</Link>\n          </li>\n          <li>\n            <Link href=\"./anchor-link-menu\">L1 label 4</Link>\n          </li>\n          <li>\n            <Link href=\"./anchor-link-menu\">L1 label 5</Link>\n          </li>\n        </ul>\n      </section>\n    </AnchorLinkMenu>\n  );\n};"
      }
    ]
  },
  {
    "component": "Avatar",
    "description": "A visual representation of a user or entity, typically displayed as a circular image or initials. Used for user identification and personalization in interfaces.",
    "category": "Display",
    "tags": [
      "user",
      "profile",
      "image",
      "initials",
      "identity",
      "person",
      "circular",
      "photo",
      "profile picture"
    ],
    "variants": [
      {
        "name": "Avatar with Image",
        "description": "Avatar component displaying a user's profile image in a circular format",
        "code": "import { Avatar } from '@visa/nova-react';\n\n/// This is the base url for where your site is deployed. `import.meta.env.BASE_URL` is the environment variable used to import the base url for Vite. Change this import to match your build tool's base url.\nconst BASE_URL = import.meta.env.BASE_URL;\nconst user = 'Alex Miller';\n\nexport const LargeImageAvatar = () => {\n  return <Avatar alt={user} tag=\"img\" src={BASE_URL + '/alex-miller-stock.png'} />;\n};"
      },
      {
        "name": "Avatar with Initial",
        "description": "Avatar component displaying user initials when no profile image is available",
        "code": "import { Avatar } from '@visa/nova-react';\n\nconst user = 'Alex Miller';\nconst userInitials = 'AM';\n\nexport const LargeInitialsAvatar = () => {\n  return <Avatar role=\"img\" aria-label={user}>{userInitials}</Avatar>;\n};"
      }
    ]
  },
  {
    "component": "Badge",
    "description": "A small status indicator that conveys information about an item's state, category, or properties. Used to highlight important information or indicate status changes.",
    "category": "Display",
    "tags": [
      "status",
      "indicator",
      "label",
      "notification",
      "count",
      "state",
      "category",
      "highlight"
    ],
    "variants": [
      {
        "name": "Subtle Badge",
        "description": "A low-emphasis badge with subtle styling for displaying secondary information",
        "code": "import { VisaHistoryTiny } from '@visa/nova-icons-react';\nimport { Badge } from '@visa/nova-react';\n\nexport const SubtleBadgeDefault = () => {\n  return (\n      <Badge badgeType=\"subtle\">\n        <VisaHistoryTiny aria-label=\"history\" /> Label\n      </Badge>\n  );\n};"
      },
      {
        "name": "Positive Badge",
        "description": "A badge with positive styling to indicate successful states or positive information",
        "code": "import { VisaSuccessTiny } from '@visa/nova-icons-react';\nimport { Badge } from '@visa/nova-react';\n\nexport const PositiveBadgeDefault = () => {\n  return (\n      <Badge badgeType=\"stable\">\n        <VisaSuccessTiny aria-label=\"success\" /> Label\n      </Badge>\n  );\n};"
      },
      {
        "name": "Negative Badge",
        "description": "A badge with error or warning styling to indicate critical states or negative information",
        "code": "import { VisaErrorTiny } from '@visa/nova-icons-react';\nimport { Badge } from '@visa/nova-react';\n\nexport const NegativeBadgeDefault = () => {\n  return (\n      <Badge badgeType=\"critical\">\n        <VisaErrorTiny aria-label=\"error\" /> Label\n      </Badge>\n  );\n};"
      }
    ]
  },
  {
    "component": "Banner",
    "description": "A prominent notification component that displays important messages, alerts, or announcements to users. Used for system-wide communications and status updates.",
    "category": "Feedback",
    "tags": [
      "notification",
      "alert",
      "message",
      "announcement",
      "system message",
      "feedback",
      "status",
      "communication"
    ],

    "variants": [
      {
        "name": "Informational banner",
        "description": "A banner that displays neutral informational messages to users",
        "code": "import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\n\nexport const DefaultInformationBanner = () => {\n  return (\n    <Banner>\n      <BannerIcon />\n      <BannerContent className=\"v-pl-2 v-pb-2\">\n        <Typography>This is required text that describes the banner in more detail.</Typography>\n      </BannerContent>\n      <BannerCloseButton />\n    </Banner>\n  );\n};"
      },
      {
        "name": "Success banner",
        "description": "A banner that displays success messages and positive feedback to users",
        "code": "import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\n\nexport const DefaultSuccessBanner = () => {\n  return (\n    <Banner messageType=\"success\">\n      <BannerIcon />\n      <BannerContent className=\"v-pl-2 v-pb-2\">\n        <Typography>This is required text that describes the banner in more detail.</Typography>\n      </BannerContent>\n      <BannerCloseButton />\n    </Banner>\n  );\n};"
      },
      {
        "name": "Warning banner",
        "description": "A banner that displays warning messages to alert users about potential issues",
        "code": "import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\n\nexport const DefaultWarningBanner = () => {\n  return (\n    <Banner messageType=\"warning\">\n      <BannerIcon />\n      <BannerContent className=\"v-pl-2 v-pb-2\">\n        <Typography>This is required text that describes the banner in more detail.</Typography>\n      </BannerContent>\n      <BannerCloseButton />\n    </Banner>\n  );\n};"
      },
      {
        "name": "Error banner",
        "description": "A banner that displays error messages and critical alerts to users",
        "code": "import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\n\nexport const DefaultErrorBanner = () => {\n  return (\n    <Banner messageType=\"error\">\n      <BannerIcon />\n      <BannerContent className=\"v-pl-2 v-pb-2\">\n        <Typography>This is required text that describes the banner in more detail.</Typography>\n      </BannerContent>\n      <BannerCloseButton />\n    </Banner>\n  );\n};"
      }
    ]
  },
  {
    "component": "Breadcrumbs",
    "description": "A navigation aid that shows users their current location within a website or application hierarchy. Helps users understand their position and navigate back to previous levels.",
    "category": "Navigation",
    "tags": [
      "navigation",
      "hierarchy",
      "path",
      "location",
      "trail",
      "secondary navigation",
      "page hierarchy",
      "breadcrumb trail"
    ],

    "variants": [
      {
        "name": "Breadcrumbs with seperator",
        "description": "A horizontal breadcrumb navigation showing the path to the current page with visual separators",
        "code": "import { Breadcrumbs, Link } from '@visa/nova-react';\n\nexport const DefaultBreadcrumbs = () => {\n  return (\n    <Breadcrumbs ariaLabel=\"Default breadcrumbs\">\n      <ol>\n        <li>\n          <Link href=\"./\">L1 label</Link>\n        </li>\n        <li>\n          <Link href=\"./\">L2 label</Link>\n        </li>\n        <li>\n          <Link href=\"./\">L3 label</Link>\n        </li>\n        <li>\n          <span aria-current=\"page\">L4 label</span>\n        </li>\n      </ol>\n    </Breadcrumbs>\n  );\n};"
      }
    ]
  },
  {
    "component": "Button",
    "description": "An interactive element that triggers actions when clicked or activated. Essential for user interactions, form submissions, navigation, and executing functions within an interface.",
    "category": "Interactive",
    "tags": [
      "action",
      "click",
      "interactive",
      "submit",
      "primary",
      "secondary",
      "call to action",
      "trigger"
    ],

    "variants": [
      {
        "name": "Primary text buttons",
        "description": "The main action button with high emphasis, typically used for primary actions and important calls-to-action",
        "code": "import { Button } from '@visa/nova-react';\n\nexport const DefaultButton = () => {\n  return <Button>Primary action</Button>;\n};"
      },
      {
        "name": "Primary icon buttons",
        "description": "A compact button containing only an icon, used when space is limited or for frequently used actions",
        "code": "import { VisaAddTiny } from '@visa/nova-icons-react';\nimport { Button } from '@visa/nova-react';\n\nexport const IconButton = () => {\n  return (\n    <Button aria-label=\"action\" iconButton>\n      <VisaAddTiny />\n    </Button>\n  );\n};"
      },
      {
        "name": "Destructive text buttons",
        "description": "A button styled to indicate destructive actions like deleting or removing content, with appropriate warning styling",
        "code": "import { VisaDeleteTiny } from '@visa/nova-icons-react';\nimport { Button } from '@visa/nova-react';\n\nexport const DestructiveButton = () => {\n  return (\n    <Button destructive>\n      <VisaDeleteTiny />\n      Destructive action\n    </Button>\n  );\n};"
      }
    ]
  },
  {
    "component": "Checkbox",
    "description": "An input control that allows users to select one or multiple options from a set. Useful for forms, settings, and multi-selection scenarios.",
    "category": "Forms",
    "tags": [
      "form",
      "input",
      "selection",
      "multiple",
      "choice",
      "toggle",
      "boolean",
      "check"
    ],

    "variants": [
      {
        "name": "Single Checkbox",
        "description": "A standalone checkbox for binary choices or single option selection",
        "code": "import { Checkbox, Label, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'checkbox-default';\n\nexport const DefaultCheckbox = () => {\n  return (\n    <Utility vAlignItems=\"center\" vFlex vGap={2}>\n      <Checkbox id={id} />\n      <Label htmlFor={id}>Label</Label>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Group checkbox",
        "description": "Multiple checkboxes grouped together for selecting multiple options from a related set",
        "code": "import { Checkbox, Label, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'checkbox-group';\n\nconst checkboxes = ['Label 1', 'Label 2', 'Label 3', 'Label 4'];\n\nexport const GroupCheckbox = () => {\n  return (\n    <fieldset aria-labelledby={`${id}-legend`}>\n      <Label id={`${id}-legend`} tag=\"legend\">\n        Group label\n      </Label>\n      <Utility tag=\"ul\" vFlex vFlexCol>\n        {checkboxes.map((checkbox, index) => (\n          <Utility key={`${id}-option-${index}`} tag=\"li\" vAlignItems=\"center\" vFlex vGap={2}>\n            <Checkbox id={`${id}-option-${index}`} />\n            <Label htmlFor={`${id}-option-${index}`}>{checkbox}</Label>\n          </Utility>\n        ))}\n      </Utility>\n    </fieldset>\n  );\n};"
      }
    ]
  },
  {
    "component": "Chips",
    "description": "Compact elements that represent input, attribute, or action. Used for tags, filters, selections, and categorization with an interactive, pill-like appearance.",
    "category": "Interactive",
    "tags": [
      "filter",
      "tag",
      "selection",
      "compact",
      "category",
      "removable",
      "choice",
      "pill"
    ],

    "variants": [
      {
        "name": "Selection chip",
        "description": "A single chip that can be selected or deselected, useful for filtering and categorization",
        "code": "import { Checkbox, Chip } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-selection-chip';\n\nexport const DefaultSelectionChip = () => {\n  return (\n    <Chip chipType=\"selection\" htmlFor={id} tag=\"label\">\n      Label\n      <Checkbox id={id} />\n    </Chip>\n  );\n};"
      },
      {
        "name": "Selection chip group",
        "description": "Multiple chips that allow users to select multiple options for filtering or categorizing content",
        "code": "import { Checkbox, Chip, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'selection-group-chip';\n\nconst chips = ['Label 1', 'Label 2', 'Label 3', 'Label 4', 'Label 5', 'Label 6', 'Label 7'];\n\nexport const SelectionGroupChip = () => {\n  return (\n    <Utility vFlex vFlexWrap vGap={8} style={{ inlineSize: '50%' }}>\n      {chips.map((chip, index) => (\n        <Chip chipType=\"selection\" htmlFor={`${id}-${index}`} key={`${id}-${index}`} tag=\"label\">\n          <span>{chip}</span>\n          <Checkbox id={`${id}-${index}`} />\n        </Chip>\n      ))}\n    </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Color selector",
    "description": "An input control that allows users to select colors using a color picker interface. Provides visual color selection with accessibility information and validation.",
    "category": "Forms",
    "tags": [
      "color",
      "picker",
      "input",
      "visual",
      "selection",
      "rgb",
      "hex",
      "hsl",
      "accessibility"
    ],

    "variants": [
      {
        "name": "Color selector",
        "description": "A color input field with accessibility tooltip providing guidance on color value formats",
        "code": "import {\n  offset,\n  safePolygon,\n  useDismiss,\n  useFloating,\n  useFocus,\n  useHover,\n  useInteractions,\n  useRole,\n} from '@floating-ui/react';\nimport { Input, Label, Button, Tooltip, Utility, UtilityFragment } from '@visa/nova-react';\nimport { VisaAccessibilityTiny } from '@visa/nova-icons-react';\nimport { useState } from 'react';\n\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'color-input';\n\nexport const ColorInput = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { x, y, strategy, refs, context } = useFloating({\n    middleware: [offset(2)],\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    placement: 'right',\n  });\n\n  const dismiss = useDismiss(context);\n  const focus = useFocus(context);\n  const hover = useHover(context, { handleClose: safePolygon(), move: false });\n  const role = useRole(context, { role: 'tooltip' });\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, focus, hover, role]);\n\n  return (\n    <Utility vFlex vAlignItems=\"center\" vGap={6}>\n      <UtilityFragment vFlexGrow0 style={{ flexBasis: '5%' }}>\n        <Input id={id} type=\"color\" />\n      </UtilityFragment>\n      <Label htmlFor={id}>Label</Label>\n      <Utility vAlignItems=\"center\" vFlex vFlexCol vGap={2}>\n      <Button \n        aria-labelledby={`${id}-label`}\n        aria-label=\"Color selector accessibility information\"\n        colorScheme=\"tertiary\"\n        iconButton\n        ref={refs.setReference} {...getReferenceProps()}>\n          <VisaAccessibilityTiny rtl />\n        </Button>\n        {isOpen && (\n        <Tooltip\n          ref={refs.setFloating}\n          style={{\n            left: x,\n            position: strategy,\n            top: y,\n            width: 'fit-content',\n          }}\n          {...getFloatingProps()}\n        >\n          For RGB, use values between 0-255. For HSL, use H values between 0-359, S and L values between 0-100%. For hex,\n          use the format #RRGGBB and values between 0-9 or A-F.\n        </Tooltip>\n      )}\n      </Utility>\n    </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Combobox",
    "description": "A combination of a text input and dropdown list that allows users to type and select from available options. Provides both search functionality and selection capabilities.",
    "category": "Forms",
    "tags": [
      "dropdown",
      "autocomplete",
      "search",
      "selection",
      "input",
      "typeahead",
      "filter",
      "combo"
    ],

    "variants": [
      {
        "name": "Combobox",
        "description": "A combobox input that combines text input with a dropdown selection list for choosing from predefined options",
        "code": "import { VisaChevronDownTiny } from '@visa/nova-icons-react';\nimport {\n  Button,\n  Combobox,\n  DropdownContainer,\n  Input,\n  InputContainer,\n  Label,\n  Listbox,\n  ListboxContainer,\n  ListboxItem,\n  Radio,\n  UtilityFragment,\n} from '@visa/nova-react';\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\n\ntype Item = { value: string };\n\nconst items: Item[] = [\n  { value: 'Option A' },\n  { value: 'Option B' },\n  { value: 'Option C' },\n  { value: 'Option D' },\n  { value: 'Option E' },\n];\n\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\n\nexport const stateReducer = <ItemType,>(\n  state: UseComboboxState<ItemType>,\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\n) =>\n  // this prevents on mouse hover, the item in the list is automatic selected\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\n    ? {\n        ...changes, // default Downshift new state changes on item selection.\n        highlightedIndex: state.highlightedIndex,\n      }\n    : changes;\n\nexport const NoAutocompleteCombobox = () => {\n  const {\n    getInputProps,\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getToggleButtonProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n  } = useCombobox({\n    items: items,\n    itemToString,\n    stateReducer,\n  });\n  const { id: listboxId, ...listboxProps } = getMenuProps();\n\n  return (\n    <Combobox>\n      <UtilityFragment vFlex vFlexCol vGap={4}>\n        <DropdownContainer>\n          <Label {...getLabelProps()}>Label</Label>\n          <UtilityFragment vFlexRow>\n            <InputContainer>\n              <Input\n                aria-haspopup=\"listbox\"\n                name=\"text-input-field-1\"\n                type=\"text\"\n                {...getInputProps({ 'aria-expanded': isOpen, 'aria-owns': listboxId })}\n              />\n              <Button\n                aria-label=\"expand\"\n                buttonSize=\"small\"\n                colorScheme=\"tertiary\"\n                iconButton\n                {...getToggleButtonProps()}\n              >\n                <VisaChevronDownTiny />\n              </Button>\n            </InputContainer>\n          </UtilityFragment>\n        </DropdownContainer>\n      </UtilityFragment>\n      <ListboxContainer>\n        <Listbox id={listboxId} {...listboxProps}>\n          {items.map((item, index) => (\n            <ListboxItem\n              className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\n              key={`no-autocomplete-example-${index}`}\n              {...getItemProps({\n                'aria-selected': inputValue === item.value,\n                index,\n                item,\n              })}\n            >\n              <UtilityFragment vFlexShrink0>\n                <Radio tag=\"span\" />\n              </UtilityFragment>\n              {item.value}\n            </ListboxItem>\n          ))}\n        </Listbox>\n      </ListboxContainer>\n    </Combobox>\n  );\n};"
      }
    ]
  },
  {
    "component": "Content card",
    "description": "A contained unit of content that groups related information together. Used to display structured content like articles, products, or summaries in a card format.",
    "category": "Layout",
    "tags": [
      "card",
      "content",
      "container",
      "structured",
      "summary",
      "article",
      "product",
      "grouped"
    ],

    "variants": [
      {
        "name": "Content card",
        "description": "A card component that displays structured content with title, subtitle, description, and actions",
        "code": "import { VisaChevronRightTiny } from '@visa/nova-icons-react';\nimport {\n  Button,\n  ContentCard,\n  ContentCardBody,\n  ContentCardSubtitle,\n  ContentCardTitle,\n  Link,\n  Typography,\n  Utility,\n} from '@visa/nova-react';\n\nexport const DefaultContentCard = () => {\n  return (\n    <ContentCard>\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={4}>\n        <ContentCardTitle variant=\"headline-4\">Headline</ContentCardTitle>\n        <ContentCardSubtitle variant=\"subtitle-3\">Subtitle</ContentCardSubtitle>\n        <Typography className=\"v-pt-4\">\n          This is optional text that describes the headline and subtitle in more detail.\n        </Typography>\n        <Utility vAlignItems=\"center\" vFlex vFlexWrap vGap={16} vPaddingTop={12}>\n          <Button>Primary action</Button>\n          <Link href=\"./content-card\" noUnderline>\n            Destination label <VisaChevronRightTiny rtl />\n          </Link>\n        </Utility>\n      </Utility>\n    </ContentCard>\n  );\n};"
      }
    ]
  },
  {
    "component": "Date and time selectors",
    "description": "Input controls for selecting dates and times. Provides calendar interfaces and time pickers for scheduling, forms, and temporal data entry.",
    "category": "Forms",
    "tags": [
      "date",
      "time",
      "calendar",
      "picker",
      "temporal",
      "schedule",
      "datetime",
      "range",
      "datepicker",
      "timepicker"
    ],

    "variants": [
      {
        "name": "Date selector",
        "description": "A date input field that allows users to select a specific date using a calendar picker",
        "code": "import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-date-selector';\n\nexport const DefaultDateSelector = () => {\n  return (\n    <Utility vFlex vFlexCol vGap={4}>\n      <Label htmlFor={id}>Label (required)</Label>\n      <InputContainer>\n        <Input id={id} required type=\"date\" />\n      </InputContainer>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Date range selector",
        "description": "A paired date input that allows users to select a start and end date range with validation",
        "code": "import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\nimport { FormEvent, useState } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-date-range-selector';\n\nexport const DefaultDateRangeSelector = () => {\n  const [endDate, setEndDate] = useState('');\n  const [startDate, setStartDate] = useState('');\n\n  const onDateChange = (event: FormEvent<HTMLInputElement>, isStartDate: boolean) => {\n    const { value } = event.currentTarget;\n    isStartDate ? setStartDate(value) : setEndDate(value);\n  };\n\n  return (\n    <Utility vFlex vFlexWrap vGap=\"12\">\n      <Utility vFlex vGap=\"4\" vFlexCol vFlexGrow>\n        <Label htmlFor={`${id}-start-date`}>Start Date Label (required)</Label>\n        <InputContainer>\n          <Input\n            id={`${id}-start-date`}\n            max={endDate ? endDate : undefined}\n            onChange={event => onDateChange(event, true)}\n            required\n            type=\"date\"\n          />\n        </InputContainer>\n      </Utility>\n      <Utility vFlex vGap=\"4\" vFlexCol vFlexGrow>\n        <Label htmlFor={`${id}-end-date`}>End Date Label (required)</Label>\n        <InputContainer>\n          <Input\n            id={`${id}-end-date`}\n            min={startDate ? startDate : undefined}\n            onChange={event => onDateChange(event, false)}\n            required\n            type=\"date\"\n          />\n        </InputContainer>\n      </Utility>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Time selector",
        "description": "A time input field that allows users to select a specific time of day",
        "code": "import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-time-selector';\n\nexport const DefaultTimeSelector = () => {\n  return (\n      <Utility vFlex vGap=\"4\" vFlexCol vFlexGrow>\n        <Label htmlFor={`${id}-time`}>Label (required)</Label>\n        <InputContainer>\n          <Input id={`${id}-time`} required type=\"time\" />\n        </InputContainer>\n      </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Dialog",
    "description": "A modal window that appears on top of the main content to focus user attention on specific tasks or information. Used for confirmations, forms, and important communications.",
    "category": "Overlay",
    "tags": [
      "modal",
      "popup",
      "overlay",
      "dialog",
      "confirmation",
      "focus",
      "blocking",
      "window"
    ],

    "variants": [
      {
        "name": "Dialog",
        "description": "A modal dialog window with header, content, and action buttons that requires user interaction",
        "code": "import {\n  Button,\n  Dialog,\n  DialogCloseButton,\n  DialogContent,\n  DialogHeader,\n  Typography,\n  useFocusTrap,\n  Utility,\n} from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'dialog';\n\nexport const DefaultDialog = () => {\n  const { onKeyNavigation, ref } = useFocusTrap();\n\n  return (\n    <>\n      <Button onClick={() => ref.current?.showModal()}>Open default dialog</Button>\n      <Dialog\n        aria-describedby={`${id}-description`}\n        aria-labelledby={`${id}-title`}\n        id={id}\n        ref={ref}\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\n      >\n        <DialogContent>\n          <DialogHeader id={`${id}-title`}>Default title</DialogHeader>\n          <Typography id={`${id}-description`}>\n            This is required text that describes the dialog title in more detail.\n          </Typography>\n          <Utility vAlignItems=\"center\" vFlex vFlexWrap vGap={8} vPaddingTop={16}>\n            <Button>Primary action</Button>\n            <Button colorScheme=\"secondary\">Secondary action</Button>\n          </Utility>\n        </DialogContent>\n        <DialogCloseButton onClick={() => ref.current?.close()} />\n      </Dialog>\n    </>\n  );\n};"
      }
    ]
  },
  {
    "component": "Divider",
    "description": "A visual separator that creates distinction between content sections or groups. Used to organize and structure content by creating visual breaks.",
    "category": "Layout",
    "tags": [
      "separator",
      "line",
      "visual break",
      "section",
      "organize",
      "structure",
      "border",
      "hr"
    ],

    "variants": [
      {
        "name": "Divider",
        "description": "A horizontal line that visually separates content sections",
        "code": "import { Divider } from '@visa/nova-react';\n\nexport const DefaultDivider = () => {\n  return <Divider />;\n};"
      }
    ]
  },
  {
    "component": "Dropdown menu",
    "description": "A contextual menu that appears when triggered, containing a list of actions or options. Used for secondary actions and space-efficient navigation.",
    "category": "Interactive",
    "tags": [
      "menu",
      "contextual",
      "actions",
      "options",
      "popup",
      "trigger",
      "secondary actions",
      "list"
    ],

    "variants": [
      {
        "name": "Dropdown menu",
        "description": "A dropdown menu triggered by a button that displays a list of actionable options",
        "code": "import { useClick, useFloating, useInteractions } from '@floating-ui/react';\nimport { VisaChevronDownTiny, VisaChevronUpTiny } from '@visa/nova-icons-react';\nimport { useState } from 'react';\nimport { Button, DropdownButton, DropdownMenu, Listbox, UtilityFragment } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'dropdown-menu-default';\n\nexport const DefaultDropdownMenu = () => {\n  const [open, setOpen] = useState(false);\n\n  const { context, floatingStyles, refs } = useFloating({\n    open,\n    onOpenChange: setOpen,\n    placement: 'bottom-start',\n  });\n\n  const onClick = useClick(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([onClick]);\n\n  return (\n    // This div is not required, it's used to show the whole dropdown menu in the example\n    <div style={{ blockSize: 250 }}>\n      <DropdownButton\n        aria-controls={id}\n        aria-expanded={open}\n        id={`${id}-button`}\n        ref={refs.setReference}\n        {...getReferenceProps()}\n      >\n        Action\n        {open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\n      </DropdownButton>\n      {open && (\n        <DropdownMenu\n          id={id}\n          aria-hidden={!open}\n          ref={refs.setFloating}\n          style={{ inlineSize: '180px', ...floatingStyles }}\n          {...getFloatingProps()}\n        >\n          <UtilityFragment vHide={!open}>\n            <Listbox>\n              <li>\n                <UtilityFragment\n                  vFlex\n                  vFlexRow\n                  vAlignItems=\"start\"\n                  vGap={6}\n                  vPaddingHorizontal={8}\n                  vPaddingVertical={11}\n                >\n                  <Button className=\"v-listbox-item\" colorScheme=\"tertiary\" subtle>\n                    Label 1\n                  </Button>\n                </UtilityFragment>\n              </li>\n              <li>\n                <UtilityFragment\n                  vFlex\n                  vFlexRow\n                  vAlignItems=\"start\"\n                  vGap={6}\n                  vPaddingHorizontal={8}\n                  vPaddingVertical={11}\n                >\n                  <Button className=\"v-listbox-item\" colorScheme=\"tertiary\" subtle>\n                    Label 3\n                  </Button>\n                </UtilityFragment>\n              </li>\n              <li>\n                <UtilityFragment\n                  vFlex\n                  vFlexRow\n                  vAlignItems=\"start\"\n                  vGap={6}\n                  vPaddingHorizontal={8}\n                  vPaddingVertical={11}\n                >\n                  <Button className=\"v-listbox-item\" colorScheme=\"tertiary\" subtle>\n                    Label 3\n                  </Button>\n                </UtilityFragment>\n              </li>\n              <li>\n                <UtilityFragment\n                  vFlex\n                  vFlexRow\n                  vAlignItems=\"start\"\n                  vGap={6}\n                  vPaddingHorizontal={8}\n                  vPaddingVertical={11}\n                >\n                  <Button className=\"v-listbox-item\" colorScheme=\"tertiary\">\n                    Label 4\n                  </Button>\n                </UtilityFragment>\n              </li>\n            </Listbox>\n          </UtilityFragment>\n        </DropdownMenu>\n      )}\n    </div>\n  );\n};"
      }
    ]
  },
  {
    "component": "Footer",
    "description": "The bottom section of a page or application that contains supplementary information, links, and legal content. Provides consistent site-wide navigation and information.",
    "category": "Layout",
    "tags": [
      "footer",
      "bottom",
      "legal",
      "links",
      "copyright",
      "site info",
      "supplementary",
      "navigation"
    ],

    "variants": [
      {
        "name": "Footer",
        "description": "A page footer containing branding, copyright information, and supplementary navigation links",
        "code": "import { Footer, Link, Utility, VisaLogo } from '@visa/nova-react';\n\nexport const DefaultFooter = () => {\n  return (\n    <Footer className=\"v-gap-15\">\n      <Utility vFlex vMarginRight={1}>\n        <VisaLogo aria-label=\"Visa\" />\n      </Utility>\n      <Utility vFlex vFlexWrap vFlexGrow vJustifyContent=\"between\" vGap={42}>\n        {`Copyright \u00a9 ${new Date().getFullYear()} Visa Inc. All Rights Reserved`}\n        <Utility tag=\"ul\" vFlex vFlexWrap vGap={16}>\n          <li>\n            <Link href=\"/footer\">Contact us</Link>\n          </li>\n          <li>\n            <Link href=\"/footer\">Privacy</Link>\n          </li>\n          <li>\n            <Link href=\"/footer\">Legal/terms and conditions</Link>\n          </li>\n        </Utility>\n      </Utility>\n    </Footer>\n  );\n};"
      }
    ]
  },
  {
    "component": "Horizontal navigation",
    "description": "A horizontal navigation bar placed at the top of an application that provides primary links and account actions.",
    "category": "Navigation",
    "tags": [
      "navigation",
      "horizontal",
      "nav bar",
      "primary navigation",
      "top navigation",
      "menu",
      "header nav",
      "main nav"
    ],

    "variants": [
      {
        "name": "Horizontal navigation",
        "description": "A comprehensive horizontal navigation bar with logo, main navigation links, search, notifications, and user account menu",
        "code": "import {\n  autoUpdate,\n  offset,\n  FloatingFocusManager,\n  useClick,\n  useFloating,\n  useInteractions,\n  useDismiss,\n} from '@floating-ui/react';\nimport {\n  VisaAccountLow,\n  VisaChevronDownTiny,\n  VisaChevronUpTiny,\n  VisaCloseLow,\n  VisaCloseTiny,\n  VisaMenuLow,\n  VisaNotificationsLow,\n  VisaSearchLow,\n} from '@visa/nova-icons-react';\nimport {\n  Avatar,\n  Badge,\n  Button,\n  Divider,\n  DropdownButton,\n  DropdownMenu,\n  Input,\n  InputContainer,\n  Link,\n  Listbox,\n  ListboxItem,\n  Nav,\n  NavAppName,\n  Surface,\n  Tab,\n  TabSuffix,\n  Tabs,\n  Typography,\n  Utility,\n  UtilityFragment,\n  VisaLogo,\n} from '@visa/nova-react';\nimport { CSSProperties, useEffect, useRef, useState } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-horizontal-nav';\n\nconst accountSubItems = [\n  {\n    tabLabel: 'L2 label 1',\n    id: `${id}-account-sub-item-0`,\n    href: './horizontal-navigation',\n  },\n  {\n    tabLabel: 'L2 label 2',\n    id: `${id}-account-sub-item-1`,\n    href: './horizontal-navigation',\n  },\n];\n\nconst label3SubItems = [\n  {\n    tabLabel: 'L2 label 1',\n    id: `${id}-label-3-sub-item-0`,\n    href: './horizontal-navigation',\n  },\n  {\n    tabLabel: 'L2 label 2',\n    id: `${id}-label-3-sub-item-1`,\n    href: './horizontal-navigation',\n  },\n];\n\nexport const DefaultHorizontalNav = () => {\n  const searchInputRef = useRef<HTMLInputElement | null>();\n  const searchButtonRef = useRef<HTMLButtonElement | null>();\n\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\n  const [mobileLabel3MenuOpen, setMobileLabel3MenuOpen] = useState(false);\n  const [expandSearch, setExpandSearch] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [label3Open, setLabel3Open] = useState(false);\n  const searchInitiallyActivated = useRef(false);\n\n  useEffect(() => {\n    if (expandSearch && searchInitiallyActivated.current) {\n      searchInputRef.current?.focus();\n    }\n    if (!expandSearch && searchInitiallyActivated.current) {\n      searchButtonRef.current?.focus();\n    }\n  }, [expandSearch]);\n  \n  // For dropdown menus in the horizontal nav, we use floating UI for\n  // -opening\n  // -positioning\n  // -dismissing\n\n  // floating-ui setup for the account dropdown\n  const {\n    context: accountFloatingContext,\n    floatingStyles: accountFloatingStyles,\n    refs: accountFloatingRefs,\n  } = useFloating({\n    middleware: [offset(2)],\n    open: accountMenuOpen,\n    onOpenChange: setAccountMenuOpen,\n    placement: 'bottom-end',\n    whileElementsMounted: autoUpdate,\n  });\n  const clickAccountRef = useClick(accountFloatingContext);\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\n    clickAccountRef,\n    dismissAccountMenu,\n  ]);\n\n  // floating-ui setup for the label3 tab dropdown\n  const {\n    context: label3FloatingContext,\n    floatingStyles: label3FloatingStyles,\n    refs: label3FloatingRefs,\n  } = useFloating({\n    middleware: [offset(8)],\n    open: label3Open,\n    onOpenChange: setLabel3Open,\n    placement: 'bottom-start',\n    whileElementsMounted: autoUpdate,\n  });\n\n  const clickLabel3Ref = useClick(label3FloatingContext);\n  const dismissLabel3Menu = useDismiss(label3FloatingContext);\n  const { getReferenceProps: getLabel3ReferenceProps, getFloatingProps: getLabel3FloatingProps } = useInteractions([\n    clickLabel3Ref,\n    dismissLabel3Menu,\n  ]);\n\n  const onToggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  return (\n    <div>\n      <Link skipLink href=\"#content\">\n        Skip to content\n      </Link>\n      <UtilityFragment vJustifyContent=\"between\">\n        <Nav id={id} orientation=\"horizontal\" tag=\"header\">\n          {!expandSearch ? (\n            <>\n              <UtilityFragment vContainerHide=\"desktop\">\n                <DropdownButton\n                  aria-controls={`${id}-mobile-menu`}\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\n                  aria-label=\"open menu\"\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\n                  buttonSize=\"large\"\n                  colorScheme=\"tertiary\"\n                  iconButton\n                  id={`${id}-mobile-menu-button`}\n                  onClick={onToggleMobileMenu}\n                >\n                  {mobileMenuOpen ? (\n                    <VisaCloseTiny />\n                  ) : (\n                    <>\n                      <VisaMenuLow />\n                      <Badge\n                        id={`${id}-mobile-menu-notifications-badge`}\n                        aria-label=\"3 notifications\"\n                        badgeVariant=\"number\"\n                        tag=\"sup\"\n                      >\n                        3\n                      </Badge>\n                    </>\n                  )}\n                </DropdownButton>\n              </UtilityFragment>\n              <UtilityFragment vFlex vGap={16}>\n                <Link\n                  aria-label=\"Visa Application Name Home\"\n                  href=\"./horizontal-navigation\"\n                  id={`${id}-home-link`}\n                  noUnderline\n                  style={{ backgroundColor: 'transparent' }}\n                >\n                  <VisaLogo />\n                  <NavAppName>\n                    <Utility\n                      vContainerHide=\"xs\"\n                      element={<Typography variant=\"headline-3\">Application Name</Typography>}\n                    />\n                  </NavAppName>\n                </Link>\n              </UtilityFragment>\n              <UtilityFragment vFlex vJustifyContent=\"end\" vFlexGrow vMarginLeft=\"auto\" vContainerHide=\"mobile\">\n                <nav aria-label=\"Label for horizontal default example\">\n                  <UtilityFragment vGap={4}>\n                    <Tabs>\n                      <Tab>\n                        <Button\n                          buttonSize=\"large\"\n                          colorScheme=\"tertiary\"\n                          element={<a href=\"./horizontal-navigation\">L1 label 1</a>}\n                        />\n                      </Tab>\n                      <Tab>\n                        <Button\n                          buttonSize=\"large\"\n                          colorScheme=\"tertiary\"\n                          element={<a href=\"./horizontal-navigation\">L1 label 2</a>}\n                        />\n                      </Tab>\n                      <Tab>\n                        <DropdownButton\n                          aria-expanded={label3Open}\n                          aria-controls={label3Open ? `${id}-label-dropdown-menu` : undefined}\n                          id={`${id}-label-dropdown-button`}\n                          buttonSize=\"large\"\n                          colorScheme=\"tertiary\"\n                          ref={label3FloatingRefs.setReference}\n                          {...getLabel3ReferenceProps()}\n                        >\n                          L1 label 3<TabSuffix element={label3Open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\n                        </DropdownButton>\n\n                        {label3Open && (\n                          <FloatingFocusManager\n                            context={label3FloatingContext}\n                            modal={false}\n                            initialFocus={-1}\n                            restoreFocus={true}\n                          >\n                            <DropdownMenu\n                              id={`${id}-label-dropdown-menu`}\n                              aria-hidden={!label3Open}\n                              style={\n                                {\n                                  inlineSize: '180px',\n                                  position: 'absolute',\n                                  ...label3FloatingStyles,\n                                  zIndex: 1,\n                                } as CSSProperties\n                              }\n                              ref={label3FloatingRefs.setFloating}\n                              {...getLabel3FloatingProps()}\n                            >\n                              <Listbox>\n                                {label3SubItems.map(label3SubItem => (\n                                  <li key={label3SubItem.id}>\n                                    <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\n                                      <ListboxItem href={label3SubItem.href} tag=\"a\">\n                                        {label3SubItem.tabLabel}\n                                      </ListboxItem>\n                                    </UtilityFragment>\n                                  </li>\n                                ))}\n                              </Listbox>\n                            </DropdownMenu>\n                          </FloatingFocusManager>\n                        )}\n                      </Tab>\n                    </Tabs>\n                  </UtilityFragment>\n                </nav>\n              </UtilityFragment>\n              <Utility vFlex vGap={8} vMarginLeft={8}>\n                <Button\n                  aria-label=\"search site\"\n                  buttonSize=\"large\"\n                  ref={searchButtonRef}\n                  colorScheme=\"tertiary\"\n                  iconButton\n                  onClick={() => { setExpandSearch(true); searchInitiallyActivated.current = true; }}\n\n                >\n                  <VisaSearchLow />\n                </Button>\n                <UtilityFragment vContainerHide=\"mobile\">\n                  <Button\n                    aria-label=\"notifications\"\n                    aria-describedby={`${id}-notifications-badge`}\n                    buttonSize=\"large\"\n                    colorScheme=\"tertiary\"\n                    iconButton\n                  >\n                    <VisaNotificationsLow />\n\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\"number\" tag=\"sup\">\n                      3\n                    </Badge>\n                  </Button>\n                </UtilityFragment>\n                <UtilityFragment vContainerHide=\"mobile\">\n                  <Tab tag=\"div\">\n                    <DropdownButton\n                      aria-expanded={accountMenuOpen}\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\n                      aria-label=\"Alex Miller\"\n                      buttonSize=\"large\"\n                      colorScheme=\"tertiary\"\n                      element={<Avatar tag=\"button\" />}\n                      ref={accountFloatingRefs.setReference}\n                      {...getAccountReferenceProps()}\n                    >\n                      <VisaAccountLow />\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\n                    </DropdownButton>\n                    {accountMenuOpen && (\n                      <FloatingFocusManager\n                        context={accountFloatingContext}\n                        modal={false}\n                        initialFocus={-1}\n                        restoreFocus={true}\n                      >\n                        <DropdownMenu\n                          id={`${id}-account-menu`}\n                          aria-hidden={!accountMenuOpen}\n                          style={\n                            {\n                              inlineSize: '180px',\n                              position: 'absolute',\n                              ...accountFloatingStyles,\n                              zIndex: 1,\n                            } as CSSProperties\n                          }\n                          ref={accountFloatingRefs.setFloating}\n                          {...getAccountFloatingProps()}\n                        >\n                          <Listbox>\n                            {accountSubItems.map(accountSubItem => (\n                              <UtilityFragment key={accountSubItem.id}>\n                                <li>\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\n                                    <ListboxItem href={accountSubItem.href} tag=\"a\">\n                                      {accountSubItem.tabLabel}\n                                    </ListboxItem>\n                                  </UtilityFragment>\n                                </li>\n                              </UtilityFragment>\n                            ))}\n                          </Listbox>\n                        </DropdownMenu>\n                      </FloatingFocusManager>\n                    )}\n                  </Tab>\n                </UtilityFragment>\n              </Utility>\n            </>\n          ) : (\n            <UtilityFragment vFlex>\n              <Surface\n                style={\n                  {\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\n                  } as CSSProperties\n                }\n              >\n                <InputContainer>\n                  <VisaSearchLow />\n                  <Input\n                    id={`${id}-search-field`}\n                    name={`${id}-search-field`}\n                    ref={searchInputRef}\n                    required\n                    type=\"search\"\n                    aria-label=\"Search\"\n                    placeholder=\"Search\"\n                  />\n                </InputContainer>\n                <Button\n                  aria-label=\"close search\"\n                  buttonSize=\"large\"\n                  colorScheme=\"tertiary\"\n                  iconButton\n                  onClick={() => setExpandSearch(false)}\n                >\n                  <VisaCloseLow />\n                </Button>\n              </Surface>\n            </UtilityFragment>\n          )}\n        </Nav>\n      </UtilityFragment>\n      <UtilityFragment vContainerHide=\"desktop\" vHide={!mobileMenuOpen}>\n        <Nav\n          aria-label=\"Label for horizontal default example\"\n          aria-hidden={!mobileMenuOpen}\n          id={`${id}-mobile-menu`}\n          orientation=\"vertical\"\n        >\n          <Tabs orientation=\"vertical\">\n            <Tab>\n              <Button\n                buttonSize=\"large\"\n                colorScheme=\"tertiary\"\n                element={<a href=\"./horizontal-navigation\">L1 label 1</a>}\n              />\n            </Tab>\n            <Tab>\n              <Button\n                buttonSize=\"large\"\n                colorScheme=\"tertiary\"\n                element={<a href=\"./horizontal-navigation\">L1 label 2</a>}\n              />\n            </Tab>\n            <Tab>\n              <Button\n                aria-expanded={mobileLabel3MenuOpen}\n                aria-controls={mobileLabel3MenuOpen ? `${id}-account-sub-menu` : 'undefined'}\n                id={`${id}-mobile-menu-label-dropdown-button`}\n                buttonSize=\"large\"\n                colorScheme=\"tertiary\"\n                onClick={() => setMobileLabel3MenuOpen(!mobileLabel3MenuOpen)}\n              >\n                L1 Label 3\n                <TabSuffix element={mobileLabel3MenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\n              </Button>\n\n              {mobileLabel3MenuOpen && (\n                <Tabs orientation=\"vertical\" id={`${id}-account-sub-menu`}>\n                  {label3SubItems.map(label3SubItem => (\n                    <Tab key={label3SubItem.id} id={label3SubItem.id}>\n                      <Button\n                        colorScheme=\"tertiary\"\n                        element={<a href={label3SubItem.href}>{label3SubItem.tabLabel}</a>}\n                      />\n                    </Tab>\n                  ))}\n                </Tabs>\n              )}\n            </Tab>\n            <Tab>\n              <Button\n                buttonSize=\"large\"\n                colorScheme=\"tertiary\"\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\n              >\n                Notifications\n                <Badge badgeVariant=\"number\" style={{ position: 'relative' }} tag=\"sup\">\n                  3\n                </Badge>\n              </Button>\n            </Tab>\n            <Divider dividerType=\"decorative\"></Divider>\n            <Tab tag=\"div\">\n              <Button\n                aria-expanded={mobileAccountMenuOpen}\n                aria-controls={`${id}-account-sub-menu`}\n                aria-label=\"Alex Miller\"\n                buttonSize=\"large\"\n                colorScheme=\"tertiary\"\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\n              >\n                <VisaAccountLow />\n                Alex Miller\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\n              </Button>\n              {mobileAccountMenuOpen && (\n                <Tabs orientation=\"vertical\" id={`${id}-account-sub-menu`}>\n                  {accountSubItems.map(accountSubItem => (\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\n                      <Button\n                        colorScheme=\"tertiary\"\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\n                      />\n                    </Tab>\n                  ))}\n                </Tabs>\n              )}\n            </Tab>\n          </Tabs>\n        </Nav>\n      </UtilityFragment>\n    </div>\n  );\n};"
      }
    ]
  },
  {
    "component": "Input",
    "description": "A form input component that allows users to enter and edit text data. Provides accessible text input functionality with support for various input types and validation states.",
    "category": "Form Controls",
    "tags": [
      "input",
      "input field",
      "form",
      "text field",
      "user input",
      "data entry",
      "validation",
      "accessible",
      "text",
      "password",
      "masked input"
    ],
    "variants": [
      {
        "name": "Input",
        "description": "A basic text input field with label for collecting user data and form information",
        "code": "import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'input-default';\n\nexport const DefaultInput = () => {\n  return (\n    <Utility vFlex vFlexCol vGap={4}>\n      <Label htmlFor={id}>Label (required)</Label>\n      <InputContainer>\n        <Input aria-required=\"true\" id={id} type=\"text\" />\n      </InputContainer>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Input with masked field",
        "description": "A password input field with toggle button to show or hide the entered text for secure data entry",
        "code": "import { VisaPasswordHideTiny, VisaPasswordShowTiny } from '@visa/nova-icons-react';\nimport { Button, Input, InputContainer, Label, Utility } from '@visa/nova-react';\nimport { useState } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'input-mask-button';\n\nexport const MaskButtonInput = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  return (\n    <Utility vFlex vFlexCol vGap={4}>\n      <Label htmlFor={id}>Label (required)</Label>\n      <InputContainer>\n        <Input aria-required=\"true\" defaultValue=\"password\" id={id} type={showPassword ? 'text' : 'password'} />\n        <Button\n          aria-label={showPassword ? 'hide text' : 'show text'}\n          buttonSize=\"small\"\n          colorScheme=\"tertiary\"\n          iconButton\n          onClick={() => setShowPassword(!showPassword)}\n        >\n          {showPassword ? <VisaPasswordHideTiny /> : <VisaPasswordShowTiny />}\n        </Button>\n      </InputContainer>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Input for CVV",
        "description": "An input field for entering CVV (Card Verification Value) with validation for numeric input and length",
        "code": "import { VisaErrorTiny } from '@visa/nova-icons-react';\nimport { Button, Input, InputContainer, InputMessage, Label, Utility } from '@visa/nova-react';\nimport { FormEvent, useState } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'cvv-input';\n\nconst cvvLength = 3;\n\nexport const CVVInput = () => {\n  const [invalid, setInvalid] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const onReset = () => {\n    setInvalid(false);\n  };\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const isValid = event.currentTarget.checkValidity();\n    const formData = new FormData(event.currentTarget);\n    const formDataObject = Object.fromEntries(formData.entries());\n\n    // If valid, alert with CVV\n    if (isValid) alert(`Success!\\nCVV: ${formDataObject['cvv-input']}`);\n    // If invalid, focus on invalid element\n    else (event.currentTarget.querySelector(':invalid') as HTMLInputElement)?.focus();\n\n    setInvalid(!isValid);\n  };\n\n  return (\n    <Utility noValidate onReset={onReset} onSubmit={onSubmit} tag=\"form\" vFlex vFlexCol vGap={4}>\n      <Label htmlFor={id}>Security code</Label>\n      <InputContainer>\n        <Input\n          aria-describedby={`${id}-message`}\n          aria-invalid={invalid}\n          aria-required=\"true\"\n          autoComplete=\"cc-csc\"\n          id={id}\n          maxLength={cvvLength}\n          name={id}\n          onBlur={() => setFocused(false)}\n          onFocus={() => setFocused(true)}\n          pattern={`[0-9]{${cvvLength}}`}\n          required\n          type={focused ? 'text' : 'password'}\n        />\n      </InputContainer>\n      {invalid && (\n        <InputMessage id={`${id}-message`}>\n          <VisaErrorTiny />\n          Please choose a valid security code.\n        </InputMessage>\n      )}\n      <Utility vFlex vFlexRow vGap={8} vMarginTop={16}>\n        <Button type=\"submit\">Submit</Button>\n        <Button colorScheme=\"secondary\" type=\"reset\">\n          Reset\n        </Button>\n      </Utility>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Input with form control",
        "description": "A input for form control with submit button, allowing users to enter data and submit forms",
        "code": "import { Button, Input, InputContainer, Label, Utility } from '@visa/nova-react';\nimport { FormEvent } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'input-form-control';\n\nexport const CustomFormInput = () => {\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const query = formData.get(id);\n    alert(`${query} submitted!`);\n  };\n  return (\n    <form onSubmit={onSubmit}>\n      <Utility vFlex vFlexCol vGap={4}>\n        <Label htmlFor={id}>Label (required)</Label>\n        <InputContainer>\n          <Input aria-required=\"true\" id={id} name={id} type=\"text\" />\n        </InputContainer>\n      </Utility>\n      <Utility vFlex vFlexRow vGap={8} vMarginTop={16}>\n        <Button type=\"submit\">Submit</Button>\n        <Button colorScheme=\"secondary\" type=\"reset\">\n          Reset\n        </Button>\n      </Utility>\n    </form>\n  );\n};"
      },
      {
        "name": "Input for one-time password",
        "description": "An input field for one-time password (OTP) entry with validation for numeric input and length",
        "code": "import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'input-otp';\n\nexport const OneTimePasscodeInput = () => {\n  return (\n    <Utility vFlex vFlexCol vGap={4}>\n      <Label htmlFor={id}>Label</Label>\n      <InputContainer style={{ inlineSize: '160px' }}>\n        <Input aria-required=\"true\" id={id} otp type=\"text\" />\n      </InputContainer>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Input with leading icon",
        "description": "A input field with a leading icon",
        "code": "import { VisaAccountLow } from '@visa/nova-icons-react';\nimport { Input, InputContainer, Label, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'input-leading-icon';\n\nexport const LeadingIconInput = () => {\n  return (\n    <Utility vFlex vFlexCol vGap={4}>\n      <Label htmlFor={id}>Label (required)</Label>\n      <InputContainer>\n        <Utility vFlex vFlexCol>\n          <VisaAccountLow />\n        </Utility>\n        <Input aria-required=\"true\" id={id} type=\"text\" />\n      </InputContainer>\n    </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Link",
    "description": "A navigation component that creates clickable links to other pages or sections. Supports both standalone and inline link styles with proper accessibility attributes.",
    "category": "Navigation",
    "tags": [
      "link",
      "navigation",
      "anchor",
      "hyperlink",
      "url",
      "routing",
      "clickable",
      "inline",
      "accessibility"
    ],
    "variants": [
      {
        "name": "Link",
        "description": "A standalone link component for navigation to internal or external destinations.",
        "code": "import { Link } from '@visa/nova-react';\n\nexport const DefaultLink = () => {\n  return <Link href=\"./link\">Destination label</Link>;\n};"
      },
      {
        "name": "Inline link",
        "description": "A link placed inline with surrounding text, typically used within paragraphs.",
        "code": "import { Link, Typography } from '@visa/nova-react';\n\nexport const InlineLink = () => {\n  return (\n    <Typography>\n      This is a sentence with an inline <Link href=\"./link\">destination label</Link>.\n    </Typography>\n  );\n};"
      },
      {
        "name": "Link that opens in a new tab",
        "description": "A standalone link that opens the destination in a new browser tab or window.",
        "code": "import { VisaMaximizeTiny } from '@visa/nova-icons-react';\nimport { Link } from '@visa/nova-react';\n\nexport const NewTabLink = () => {\n  return (\n    <Link\n      aria-label=\"Destination label (opens in a new tab)\"\n      href=\"./link\"\n      noUnderline\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Destination label\n      <VisaMaximizeTiny />\n    </Link>\n  );\n};"
      }
    ]
  },
  {
    "component": "Listbox",
    "description": "A selectable list component that allows users to choose one or multiple options from a predefined set. Provides keyboard navigation and accessibility support.",
    "category": "Form Controls",
    "tags": [
      "listbox",
      "list box",
      "selection",
      "options",
      "multi-select",
      "single-select",
      "form",
      "choice",
      "accessible",
      "keyboard navigation"
    ],
    "variants": [
      {
        "name": "Single-select listbox",
        "description": "A scrollable list of options where users can select only one item using radio buttons",
        "code": "import { Label, Listbox, ListboxContainer, ListboxItem, Radio } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-single-select-listbox';\n\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\n\nexport const DefaultSingleListbox = () => {\n  return (\n    <fieldset>\n      <Label id={`${id}-legend`} tag=\"legend\">\n        Label (required)\n      </Label>\n      <ListboxContainer>\n        <Listbox id={id} scroll tag=\"div\">\n          {options.map((option, index) => (\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\"label\">\n              <Radio className=\"v-flex-shrink-0\" id={`${id}-option-${index}`} name={`${id}-options`} />\n              <Label tag=\"span\">{option}</Label>\n            </ListboxItem>\n          ))}\n        </Listbox>\n      </ListboxContainer>\n    </fieldset>\n  );\n};"
      },
      {
        "name": "Multi-select listbox",
        "description": "A scrollable list of options where users can select multiple items using checkboxes",
        "code": "import { Checkbox, Label, Listbox, ListboxContainer, ListboxItem } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-multi-select-listbox';\n\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\n\nexport const DefaultMultiListbox = () => {\n  return (\n    <fieldset>\n      <Label id={`${id}-legend`} tag=\"legend\">\n        Label (required)\n      </Label>\n      <ListboxContainer>\n        <Listbox id={id} scroll tag=\"div\">\n          {options.map((option, index) => (\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\"label\">\n              <Checkbox className=\"v-flex-shrink-0\" id={`${id}-option-${index}`} name={`${id}-option-${index}`} />\n              <Label tag=\"span\">{option}</Label>\n            </ListboxItem>\n          ))}\n        </Listbox>\n      </ListboxContainer>\n    </fieldset>\n  );\n};"
      }
    ]
  },
  {
    "component": "Navigation drawer",
    "description": "A slide-out navigation panel that provides hierarchical site navigation and user account access. Can be opened and closed to save screen space.",
    "category": "Navigation",
    "tags": [
      "drawer",
      "sidebar",
      "navigation",
      "menu",
      "modal",
      "slide-out",
      "hierarchical",
      "collapsible",
      "mobile-friendly"
    ],
    "variants": [
      {
        "name": "Navigation Drawer",
        "description": "A modal slide-out navigation panel with app branding, hierarchical menu items, and user account section",
        "code": "import { VisaAccountTiny, VisaChevronDownTiny, VisaChevronUpTiny, VisaCloseTiny } from '@visa/nova-icons-react';\nimport {\n  Button,\n  Divider,\n  Panel,\n  Link,\n  Nav,\n  NavAppName,\n  Tab,\n  TabSuffix,\n  Tabs,\n  Typography,\n  Utility,\n  UtilityFragment,\n  VisaLogo,\n} from '@visa/nova-react';\nimport { CSSProperties, useState, useRef } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-navigation-drawer';\nconst navElAriaLabel = 'Default drawer';\n\nconst tabsContent = [\n  {\n    tabLabel: 'L1 label 1',\n    id: `${id}-tab-0`,\n    href: './navigation-drawer',\n  },\n  {\n    tabLabel: 'L1 label 2',\n    id: `${id}-tab-1`,\n    href: './navigation-drawer',\n  },\n  {\n    tabLabel: 'L1 label 3',\n    id: `${id}-tab-2`,\n    href: './navigation-drawer',\n  },\n  {\n    tabLabel: 'L1 label 4',\n    id: `${id}-tab-3`,\n    href: './navigation-drawer',\n  },\n  {\n    tabLabel: 'L1 label 5',\n    id: `${id}-tab-4`,\n    href: './navigation-drawer',\n  },\n];\n\nconst accountSubItems = [\n  {\n    tabLabel: 'L2 label 1',\n    id: `${id}-account-sub-item-0`,\n    href: './navigation-drawer',\n  },\n  {\n    tabLabel: 'L2 label 2',\n    id: `${id}-account-sub-item-1`,\n    href: './navigation-drawer',\n  },\n];\n\nexport const DefaultNavigationDrawer = () => {\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\n\n  return (\n    <>\n      <UtilityFragment vMargin={10}>\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\n      </UtilityFragment>\n\n      <UtilityFragment vMarginHorizontal={0}>\n        <Panel\n          aria-modal=\"true\"\n          ref={navDrawerRef}\n          id={id}\n          tag=\"dialog\"\n          style={\n            {\n              '--v-panel-inline-size': 'initial',\n            } as CSSProperties\n          }\n        >\n          <Nav\n            drawer\n            orientation=\"vertical\"\n            tag=\"div\"\n            style={\n              {\n                inlineSize: '242px',\n              } as CSSProperties\n            }\n          >\n            <UtilityFragment vMarginRight={4} vMarginLeft=\"auto\">\n              <Button\n                aria-label=\"Close\"\n                buttonSize=\"small\"\n                colorScheme=\"tertiary\"\n                iconButton\n                onClick={() => navDrawerRef.current?.close()}\n                subtle\n              >\n                <VisaCloseTiny />\n              </Button>\n            </UtilityFragment>\n            <UtilityFragment\n              vFlex\n              vFlexCol\n              vGap={12}\n              vMarginTop={4}\n              vMarginRight={16}\n              vMarginBottom={16}\n              vMarginLeft={24}\n            >\n              <Link\n                aria-label=\"Visa Application Name Home\"\n                href=\"https://www.visa.com\"\n                id={`${id}-home-link`}\n                noUnderline\n                style={{ backgroundColor: 'transparent' }}\n              >\n                <VisaLogo />\n                <NavAppName>\n                  <Typography variant=\"subtitle-1\">Application Name</Typography>\n                </NavAppName>\n              </Link>\n            </UtilityFragment>\n            <nav aria-label={navElAriaLabel}>\n              <Tabs orientation=\"vertical\">\n                {tabsContent.map(tabContent => (\n                  <Tab key={tabContent.id}>\n                    <UtilityFragment vMarginLeft={14}>\n                      <Button colorScheme=\"tertiary\" element={<a href={tabContent.href}>{tabContent.tabLabel}</a>} />\n                    </UtilityFragment>\n                  </Tab>\n                ))}\n              </Tabs>\n            </nav>\n            <Utility vFlex vFlexCol vAlignSelf=\"stretch\" vGap={4} vMarginTop=\"auto\">\n              <Divider dividerType=\"decorative\" />\n              <Tab tag=\"div\">\n                <Button\n                  aria-expanded={accountTabOpen}\n                  aria-controls={`${id}-account-sub-menu`}\n                  aria-label=\"Alex Miller\"\n                  buttonSize=\"large\"\n                  colorScheme=\"tertiary\"\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\n                >\n                  <VisaAccountTiny />\n                  Alex Miller\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\n                </Button>\n                <UtilityFragment vHide={!accountTabOpen}>\n                  <Tabs orientation=\"vertical\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\n                    {accountSubItems.map(accountSubItem => (\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\n                        <Button\n                          colorScheme=\"tertiary\"\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\n                        />\n                      </Tab>\n                    ))}\n                  </Tabs>\n                </UtilityFragment>\n              </Tab>\n            </Utility>\n          </Nav>\n        </Panel>\n      </UtilityFragment>\n    </>\n  );\n};"
      }
    ]
  },
  {
    "component": "Pagination",
    "description": "A navigation component for browsing through multiple pages of content. Provides controls for moving between pages and jumping to specific page numbers.",
    "category": "Navigation",
    "tags": [
      "pagination",
      "paging",
      "navigation",
      "page numbers",
      "previous",
      "next",
      "first",
      "last",
      "content navigation"
    ],
    "variants": [
      {
        "name": "Pagination",
        "description": "A complete pagination control with first, previous, numbered pages, next, and last navigation buttons",
        "code": "import {\n  VisaArrowEndTiny,\n  VisaArrowStartTiny,\n  VisaChevronLeftTiny,\n  VisaChevronRightTiny,\n  VisaOptionHorizontalTiny,\n} from '@visa/nova-icons-react';\nimport { Button, Pagination, PaginationOverflow } from '@visa/nova-react';\n\nexport const OneDigitPagination = () => {\n  return (\n    <nav aria-label=\"1 digit pagination\" role=\"navigation\">\n      <Pagination className=\"v-flex v-flex-row v-align-items-center v-gap-4\">\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Go to first page\" buttonSize=\"small\" colorScheme=\"tertiary\" disabled iconButton>\n            <VisaArrowStartTiny rtl />\n          </Button>\n        </li>\n        <li>\n          <Button aria-label=\"Go to previous page\" buttonSize=\"small\" colorScheme=\"tertiary\" disabled iconButton>\n            <VisaChevronLeftTiny rtl />\n          </Button>\n        </li>\n        <li>\n          <Button aria-current=\"true\" aria-label=\"Page 1\" colorScheme=\"tertiary\">\n            1\n          </Button>\n        </li>\n        <li>\n          <Button aria-label=\"Page 2\" colorScheme=\"tertiary\">\n            2\n          </Button>\n        </li>\n        <li>\n          <Button aria-label=\"Page 3\" colorScheme=\"tertiary\">\n            3\n          </Button>\n        </li>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Page 4\" colorScheme=\"tertiary\">\n            4\n          </Button>\n        </li>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Page 5\" colorScheme=\"tertiary\">\n            5\n          </Button>\n        </li>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Page 6\" colorScheme=\"tertiary\">\n            6\n          </Button>\n        </li>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Page 7\" colorScheme=\"tertiary\">\n            7\n          </Button>\n        </li>\n        <PaginationOverflow className=\"v-flex v-align-items-center v-mobile-container-hide\">\n          <VisaOptionHorizontalTiny />\n        </PaginationOverflow>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Page 100\" colorScheme=\"tertiary\">\n            100\n          </Button>\n        </li>\n        <li>\n          <Button aria-label=\"Go to next page\" buttonSize=\"small\" colorScheme=\"tertiary\" iconButton>\n            <VisaChevronRightTiny rtl />\n          </Button>\n        </li>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Go to last page\" buttonSize=\"small\" colorScheme=\"tertiary\" iconButton>\n            <VisaArrowEndTiny rtl />\n          </Button>\n        </li>\n      </Pagination>\n    </nav>\n  );\n};"
      },
      {
        "name": "Slim pagination",
        "description": "A shorter pagination with fewer numbers and no overflow, suitable for limited page counts",
        "code": "import { VisaChevronLeftTiny, VisaChevronRightTiny } from '@visa/nova-icons-react';\nimport { Button, Pagination } from '@visa/nova-react';\n\nexport const SlimPagination = () => {\n  return (\n    <nav aria-label=\"pagination\">\n      <Pagination className=\"v-flex v-flex-row v-align-items-center v-gap-4\">\n        <li>\n          <Button aria-label=\"Go to previous page\" buttonSize=\"small\" colorScheme=\"tertiary\" disabled iconButton>\n            <VisaChevronLeftTiny rtl />\n          </Button>\n        </li>\n        <li>\n          <Button aria-current=\"true\" aria-label=\"Page 1\" colorScheme=\"tertiary\">\n            1\n          </Button>\n        </li>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Page 2\" colorScheme=\"tertiary\">\n            2\n          </Button>\n        </li>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Page 3\" colorScheme=\"tertiary\">\n            3\n          </Button>\n        </li>\n        <li className=\"v-mobile-container-hide\">\n          <Button aria-label=\"Page 4\" colorScheme=\"tertiary\">\n            4\n          </Button>\n        </li>\n        <li>\n          <Button aria-label=\"Go to next page\" buttonSize=\"small\" colorScheme=\"tertiary\" iconButton>\n            <VisaChevronRightTiny rtl />\n          </Button>\n        </li>\n      </Pagination>\n    </nav>\n  );\n};"
      }
    ]
  },
  {
    "component": "Panel",
    "description": "A modal dialog component that displays content in an overlay. Provides focus trapping and accessible modal behavior for displaying additional information or forms.",
    "category": "Layout",
    "tags": [
      "panel",
      "modal",
      "dialog",
      "overlay",
      "popup",
      "focus trap",
      "accessible",
      "content container"
    ],
    "variants": [
      {
        "name": "Modal panel",
        "description": "A modal dialog overlay with header, body content, close button, and focus trap functionality",
        "code": "import { VisaCloseTiny } from '@visa/nova-icons-react';\nimport {\n  Button,\n  Panel,\n  PanelBody,\n  PanelContent,\n  PanelHeader,\n  Typography,\n  useFocusTrap,\n  Utility,\n} from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'modal-panel-default';\n\nexport const ModalPanel = () => {\n  const { onKeyNavigation, ref } = useFocusTrap();\n\n  return (\n    <>\n      <Button onClick={() => ref.current?.showModal()}>Open modal panel</Button>\n      <Panel\n        aria-describedby={`${id}-description`}\n        aria-labelledby={`${id}-title`}\n        aria-modal=\"true\"\n        id={id}\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\n        ref={ref}\n        tag=\"dialog\"\n      >\n        <PanelContent>\n          <Utility element={<PanelHeader />} vFlex vFlexRow vJustifyContent=\"between\" vGap={4}>\n            <Typography id={`${id}-title`} tag=\"h2\" variant=\"headline-3\">\n              Panel title\n            </Typography>\n            <Button\n              aria-label=\"Close panel\"\n              buttonSize=\"small\"\n              className=\"-v-mt-3 -v-mr-8\"\n              colorScheme=\"tertiary\"\n              iconButton\n              onClick={() => ref.current?.close()}\n              subtle\n            >\n              <VisaCloseTiny />\n            </Button>\n          </Utility>\n          <PanelBody>\n            <Typography id={`${id}-description`} tag=\"h3\" variant=\"subtitle-2\">\n              Panel subtitle\n            </Typography>\n            <Typography>\n              This is required text that can be used to describe the panel title and subtitle in more detail.\n            </Typography>\n          </PanelBody>\n        </PanelContent>\n      </Panel>\n    </>\n  );\n};"
      }
    ]
  },
  {
    "component": "Progress",
    "description": "A visual indicator component that shows the progress of a task or loading state. Supports both determinate and indeterminate progress states.",
    "category": "Feedback",
    "tags": [
      "progress",
      "progress bar",
      "loading",
      "indicator",
      "status",
      "linear",
      "indeterminate",
      "task progress",
      "visual feedback"
    ],
    "variants": [
      {
        "name": "Linear Progress Indicator",
        "description": "An indeterminate linear progress bar with start, reset, play, and pause controls for task status",
        "code": "import { VisaMediaPauseAltTiny, VisaMediaPlayAltTiny } from '@visa/nova-icons-react';\nimport { Button, ProgressLabel, ProgressLinear, Utility, UtilityFragment } from '@visa/nova-react';\nimport { useState } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'indeterminate-linear-progress';\n\nexport const IndeterminateProgress = () => {\n  const [paused, setPaused] = useState(false);\n  const [initiated, setInitiated] = useState(false);\n  const [loadingMsg, setLoadingMsg] = useState('');\n\nconst start = () => {\n  setInitiated(true);\n  setTimeout(() => {\n    setLoadingMsg('Loading...');\n  }, 0);\n}\n  \nconst reset = () => {\n  setInitiated(false);\n  setLoadingMsg('');\n}\n\n  return (\n    <Utility vFlexCol vGap={12}>\n        {initiated && (\n      <Utility vFlexGrow>\n        <UtilityFragment vMarginVertical={8}>\n          <ProgressLinear id={id} paused={paused} />\n        </UtilityFragment>\n        <ProgressLabel htmlFor={id}>\n          <Utility tag=\"span\" role=\"alert\">{loadingMsg}</Utility>\n        </ProgressLabel>\n      </Utility>\n        )}\n      <Utility vMarginVertical={12} vFlex vGap={12}>\n        <Button onClick={() => start()}>\n          Start\n        </Button>\n        <Button colorScheme=\"secondary\" onClick={() => reset()}>\n          Reset\n        </Button>\n        <Button colorScheme=\"secondary\" onClick={() => setPaused(!paused)}>\n          {paused ? (\n            <>\n              <VisaMediaPlayAltTiny />\n              Play\n            </>\n          ) : (\n            <>\n              <VisaMediaPauseAltTiny />\n              Pause\n            </>\n          )}\n        </Button>\n      </Utility>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Completed Linear Progress Indicator",
        "description": "An indeterminate linear progress bar that shows a completed state with a message",
        "code": "import { VisaSuccessTiny } from '@visa/nova-icons-react';\nimport { ProgressLabel, ProgressLinear, Utility, UtilityFragment } from '@visa/nova-react';\n\nconst id = 'complete-linear-progress';\n\nexport const CompleteProgress = () => {\n  return (\n    <>\n      <UtilityFragment vMarginVertical={8}>\n        <ProgressLinear completed id={id} max={100} value={100} aria-valuenow={100} />\n      </UtilityFragment>\n      <ProgressLabel htmlFor={id}>\n        <Utility tag=\"span\" vFlex vGap={4} role=\"alert\">\n          <VisaSuccessTiny />\n          File is now uploaded.\n        </Utility>\n        <span>100%</span>\n      </ProgressLabel>\n    </>\n  );\n};"
      }
    ]
  },
  {
    "component": "Radio",
    "description": "A form control that allows users to select a single option from a group of mutually exclusive choices. Provides accessible radio button functionality.",
    "category": "Form Controls",
    "tags": [
      "radio",
      "selection",
      "single choice",
      "form",
      "mutually exclusive",
      "group",
      "accessible",
      "option"
    ],
    "variants": [
      {
        "name": "Radio button",
        "description": "A single radio button control with label for binary choice selection in forms",
        "code": "import { Label, Radio, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-radio';\n\nexport const DefaultRadio = () => {\n  return (\n    <Utility vAlignItems=\"center\" vFlex vGap={2}>\n      <Radio id={id} name={id} />\n      <Label htmlFor={id}>Label</Label>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Radio button group",
        "description": "A fieldset of radio buttons where users can select one option from multiple mutually exclusive choices",
        "code": "import { Label, Radio, Typography, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'group-radio';\n\nconst radios = ['Label 1', 'Label 2', 'Label 3'];\n\nexport const GroupRadio = () => {\n  return (\n    <fieldset>\n      <Typography tag=\"legend\" variant=\"label\">\n        Group label (required)\n      </Typography>\n      <Utility vFlex vFlexCol vGap={4}>\n        {radios.map((radio, index) => (\n          <Utility key={`${id}-option-${index}`} vAlignItems=\"center\" vFlex vGap={2}>\n            <Radio id={`${id}-option-${index}`} name={`${id}-options`} />\n            <Label htmlFor={`${id}-option-${index}`}>{radio}</Label>\n          </Utility>\n        ))}\n      </Utility>\n    </fieldset>\n  );\n};"
      }
    ]
  },
  {
    "component": "Select",
    "description": "A dropdown form control that allows users to choose from a list of predefined options. Supports single selection with keyboard navigation.",
    "category": "Form Controls",
    "tags": [
      "select",
      "dropdown",
      "form",
      "options",
      "choice",
      "single selection",
      "keyboard navigation",
      "accessible"
    ],
    "variants": [
      {
        "name": "Select",
        "description": "A dropdown select menu that allows users to choose one option from a predefined list",
        "code": "import { VisaChevronDownTiny } from '@visa/nova-icons-react';\nimport { InputContainer, InputControl, Label, Select, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-select';\n\nconst options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E'];\n\nexport const DefaultSelect = () => {\n  return (\n    <Utility tag=\"fieldset\" vFlex vFlexCol vGap={6}>\n      <Label htmlFor={id}>Label (required)</Label>\n      <InputContainer>\n        <Select id={id} name={`${id}-name`}>\n          <option hidden value=\"\" />\n          {options.map((option, index) => (\n            <option key={`${id}-option-${index}`} value={index}>\n              {option}\n            </option>\n          ))}\n        </Select>\n        <InputControl>\n          <VisaChevronDownTiny />\n        </InputControl>\n      </InputContainer>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Select for card expiration",
        "description": "A specialized dual-select component for credit card expiration date with month and year dropdowns and validation",
        "code": "import { VisaChevronDownTiny, VisaErrorTiny } from '@visa/nova-icons-react';\nimport {\n  Button,\n  InputContainer,\n  InputControl,\n  InputMessage,\n  Label,\n  Select,\n  Typography,\n  Utility,\n} from '@visa/nova-react';\nimport { ChangeEvent, FormEvent, useState } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'card-expiration-select';\n\nconst today = new Date();\nconst currentMonth = today.getMonth() + 1;\nconst currentMonthString = currentMonth.toString();\nconst currentYear = today.getFullYear();\nconst currentYearString = currentYear.toString();\n\nconst months = Array.from({ length: 12 }, (_, i) => i + 1);\nconst years = Array.from({ length: 11 }, (_, i) => currentYear + i);\n\nexport const CardExpirationSelect = () => {\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [selectedYear, setSelectedYear] = useState('');\n  const [invalid, setInvalid] = useState(false);\n\n  const onMonthChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedMonth(event.target.value);\n    setInvalid(false);\n  };\n  const onYearChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedYear(event.target.value);\n    setInvalid(false);\n  };\n\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    const isValid = event.currentTarget.checkValidity();\n\n    // If valid, alert with selections\n    if (isValid) alert(`Selected Month: ${selectedMonth}\\nSelected Year: ${selectedYear}`);\n    // If invalid, focus on invalid element\n    else (event.currentTarget.querySelector(':not(fieldset):invalid') as HTMLInputElement)?.focus();\n\n    setInvalid(!isValid);\n    event.preventDefault();\n  };\n\n  return (\n    <Utility noValidate onSubmit={onSubmit} tag=\"form\" vFlex vFlexCol vGap={6}>\n      <Utility aria-labelledby={`${id}-message`} tag=\"fieldset\" vFlex vFlexCol vGap={4}>\n        <Label tag=\"legend\">Expires (MM/YY)</Label>\n        <Utility vFlex vFlexRow vAlignItems=\"center\" vGap={6}>\n          {/* Month select */}\n          <InputContainer>\n            <Select\n              aria-describedby={`${id}-message`}\n              aria-invalid={invalid && selectedMonth === ''}\n              aria-label=\"Expiration month\"\n              aria-required={true}\n              autoComplete=\"cc-exp-month\"\n              id={`${id}-month`}\n              name={`${id}-month`}\n              onChange={onMonthChange}\n              required\n              value={selectedMonth}\n            >\n              <option hidden value=\"\" />\n              {months.map(month => (\n                <option\n                  disabled={selectedYear !== '' && selectedYear === currentYearString && month < currentMonth}\n                  key={`card-exp-month-${month}`}\n                  value={month}\n                >\n                  {(month < 10 ? '0' : '') + month}\n                </option>\n              ))}\n            </Select>\n            <InputControl>\n              <VisaChevronDownTiny />\n            </InputControl>\n          </InputContainer>\n\n          <Typography aria-hidden={true} tag=\"span\" variant=\"body-1\">\n            /\n          </Typography>\n\n          {/* Year select */}\n          <InputContainer>\n            <Select\n              aria-describedby={`${id}-message`}\n              aria-invalid={invalid && selectedYear === ''}\n              aria-label=\"Expiration year\"\n              aria-required={true}\n              autoComplete=\"cc-exp-year\"\n              id={`${id}-year`}\n              name={`${id}-year`}\n              onChange={onYearChange}\n              required\n              value={selectedYear}\n            >\n              <option hidden value=\"\" />\n              {years.map(year => (\n                <option\n                  disabled={selectedMonth !== '' && year === currentYear && selectedMonth < currentMonthString}\n                  key={`card-exp-year-${year}`}\n                  value={year}\n                >\n                  {year.toString().substring(2)}\n                </option>\n              ))}\n            </Select>\n            <InputControl>\n              <VisaChevronDownTiny />\n            </InputControl>\n          </InputContainer>\n        </Utility>\n        {invalid && (\n          <InputMessage aria-atomic=\"true\" aria-live=\"assertive\" id={`${id}-message`}>\n            <VisaErrorTiny />\n            This is required text that describes the error in more detail\n          </InputMessage>\n        )}\n      </Utility>\n      <div>\n        <Button type=\"submit\">Submit</Button>\n      </div>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Select with error",
        "description": "A dropdown select menu that allows users to choose one option from a predefined list, with error state and message",
        "code": "import { VisaChevronDownTiny, VisaErrorTiny } from '@visa/nova-icons-react';\nimport { ChangeEvent, FormEvent, useRef, useState } from 'react';\nimport { Button, InputContainer, InputControl, InputMessage, Label, Select, Utility } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'error-select';\n\nconst options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E'];\n\nexport const ErrorSelect = () => {\n  const [invalid, setInvalid] = useState(false);\n  const [selectValue, setSelectValue] = useState('');\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const onReset = (event: FormEvent) => {\n    event.preventDefault();\n    setInvalid(false);\n    setSelectValue('');\n  };\n  const onSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.currentTarget;\n    setInvalid(!value);\n    setSelectValue(value);\n  };\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    const isInvalid = !selectValue;\n    setInvalid(isInvalid);\n    if (isInvalid) {\n      selectRef.current?.focus();\n    }\n  };\n\n  return (\n    <Utility noValidate onReset={onReset} onSubmit={onSubmit} tag=\"form\" vFlex vFlexCol vGap={16}>\n      <Utility aria-labelledby={`${id}-message`} tag=\"fieldset\" vFlex vFlexCol vGap={6}>\n        <Label htmlFor={id}>Label (required)</Label>\n        <InputContainer>\n          <Select\n            aria-describedby={`${id}-message`}\n            aria-invalid={invalid}\n            id={id}\n            name=\"full-name\"\n            onChange={onSelectChange}\n            ref={selectRef}\n            required\n            value={selectValue}\n          >\n            <option hidden value=\"\" />\n            {options.map((option, index) => (\n              <option key={`${id}-option-${index}`} value={index}>\n                {option}\n              </option>\n            ))}\n          </Select>\n          <InputControl>\n            <VisaChevronDownTiny />\n          </InputControl>\n        </InputContainer>\n        {invalid && (\n          <InputMessage aria-atomic=\"true\" aria-live=\"assertive\" id={`${id}-message`}>\n            <VisaErrorTiny />\n            This is required text that describes the error in more detail\n          </InputMessage>\n        )}\n      </Utility>\n      <Utility vFlex vGap={10}>\n        <Button type=\"submit\">Submit</Button>\n        <Button colorScheme=\"secondary\" type=\"reset\">\n          Reset\n        </Button>\n      </Utility>\n    </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Switch",
    "description": "A toggle control that allows users to turn an option on or off. Provides binary state control with clear visual feedback.",
    "category": "Form Controls",
    "tags": [
      "switch",
      "toggle",
      "binary",
      "on off",
      "form",
      "control",
      "state",
      "boolean",
      "accessible"
    ],
    "variants": [
      {
        "name": "Switch",
        "description": "A toggle switch control that allows users to turn an option on or off with clear visual state feedback",
        "code": "import { Switch, SwitchLabel, Utility } from '@visa/nova-react';\n\nconst id = 'default-switch-example';\n\nexport const DefaultSwitch = () => {\n  return (\n    <Utility vFlex vFlexWrap vGap={10} vJustifyContent=\"between\" vMargin={8} style={{ maxInlineSize: '288px' }}>\n      <SwitchLabel htmlFor={`${id}-switch`}>Label</SwitchLabel>\n      <Switch id={`${id}-switch`} name=\"default-switch\" />\n    </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Table",
    "description": "A structured data display component that organizes information in rows and columns. Supports various styling options including borders and responsive design.",
    "category": "Data Display",
    "tags": [
      "table",
      "data",
      "rows",
      "columns",
      "structured",
      "grid",
      "tabular",
      "borders",
      "responsive"
    ],
    "variants": [
      {
        "name": "Table with borders",
        "description": "A structured data table with outer borders and column/row dividers for clear data organization and readability",
        "code": "import { ScreenReader, Table, TableWrapper, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\n\nexport const OuterBorderColumnRowDividerTable = () => {\n  return (\n    <TableWrapper>\n      <Table border>\n        <ScreenReader tag=\"caption\">Table with outer borders on column and row dividers.</ScreenReader>\n        <Thead>\n          <Tr>\n            <Th scope=\"col\">Column A</Th>\n            <Th scope=\"col\">Column B</Th>\n            <Th scope=\"col\">Column C</Th>\n            <Th scope=\"col\">Column D</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr>\n            <Td>A1</Td>\n            <Td>B1</Td>\n            <Td>C1</Td>\n            <Td>D1</Td>\n          </Tr>\n          <Tr>\n            <Td>A2</Td>\n            <Td>B2</Td>\n            <Td>C2</Td>\n            <Td>D2</Td>\n          </Tr>\n          <Tr>\n            <Td>A3</Td>\n            <Td>B3</Td>\n            <Td>C3</Td>\n            <Td>D3</Td>\n          </Tr>\n        </Tbody>\n      </Table>\n    </TableWrapper>\n  );\n};"
      }
    ]
  },
  {
    "component": "Tabs",
    "description": "A navigation component that organizes content into separate panels accessible via clickable tabs. Supports both horizontal and vertical orientations.",
    "category": "Navigation",
    "tags": [
      "tabs",
      "tablist",
      "content organization",
      "panels",
      "navigation",
      "horizontal",
      "vertical",
      "accessible",
      "keyboard navigation"
    ],
    "variants": [
      {
        "name": "Vertical tablist",
        "description": "A vertically oriented tab navigation system with content panels displayed side-by-side",
        "code": "import { Button, Surface, Tab, Tabs, Utility, UtilityFragment, useTabs } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'nova-vertical-tabs-example';\n\nconst tabsContent = [\n  {\n    tabLabel: 'Label 1',\n    text: `This is the content area for label 1`,\n    id: `${id}-tab-0`,\n  },\n  {\n    tabLabel: 'Label 2',\n    text: `This is the content area for label 2`,\n    id: `${id}-tab-1`,\n  },\n  {\n    tabLabel: 'Label 3',\n    text: `This is the content area for label 3`,\n    id: `${id}-tab-2`,\n  },\n  {\n    tabLabel: 'Label 4',\n    text: `This is the content area for label 4`,\n    id: `${id}-tab-3`,\n  },\n];\n\nexport const DefaultVerticalTabs = () => {\n  const {\n    getTabIndex,\n    onIndexChange,\n    onKeyNavigation,\n    ref: tabsRef,\n    selectedIndex,\n  } = useTabs({ arrowKeyNavigation: 'vertical', defaultSelected: 0 });\n\n  return (\n    <Utility vFlex vFlexWrap vGap={8}>\n      <Tabs onKeyDown={onKeyNavigation} orientation=\"vertical\" role=\"tablist\" style={{ flexBasis: '30%' }}>\n        {tabsContent.map((tabContent, index) => (\n          <Tab key={tabContent.id} role=\"none\">\n            <Button\n              aria-selected={index === selectedIndex}\n              aria-controls={tabContent.id}\n              colorScheme=\"tertiary\"\n              onClick={() => onIndexChange(index)}\n              ref={el => {\n                tabsRef.current[index] = el;\n              }}\n              role=\"tab\"\n              tabIndex={getTabIndex(index)}\n            >\n              {tabContent.tabLabel}\n            </Button>\n          </Tab>\n        ))}\n      </Tabs>\n      <Utility vFlex vFlexGrow vElevation=\"inset\">\n        <UtilityFragment vPadding={10}>\n          <Surface id={tabsContent[selectedIndex].id} role=\"tabpanel\">\n            <span>{tabsContent[selectedIndex]?.text}</span>\n          </Surface>\n        </UtilityFragment>\n      </Utility>\n    </Utility>\n  );\n};"
      },
      {
        "name": "Horizontal tablist",
        "description": "A horizontally oriented tab navigation system with content panels displayed below the tab bar",
        "code": "import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'nova-horizontal-tabs-example';\n\nconst tabsContent = [\n  {\n    tabLabel: 'Label 1',\n    text: `This is the content area for label 1`,\n    id: `${id}-tab-0`,\n  },\n  {\n    tabLabel: 'Label 2',\n    text: `This is the content area for label 2`,\n    id: `${id}-tab-1`,\n  },\n  {\n    tabLabel: 'Label 3',\n    text: `This is the content area for label 3`,\n    id: `${id}-tab-2`,\n  },\n  {\n    tabLabel: 'Label 4',\n    text: `This is the content area for label 4`,\n    id: `${id}-tab-3`,\n  },\n];\n\nexport const DefaultHorizontalTabs = () => {\n  const {\n    getTabIndex,\n    onIndexChange,\n    onKeyNavigation,\n    ref: tabsRef,\n    selectedIndex,\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\n\n  return (\n    <Utility>\n      <Tabs onKeyDown={onKeyNavigation} role=\"tablist\">\n        {tabsContent.map((tabContent, index) => (\n          <Tab key={tabContent.id} role=\"none\">\n            <Button\n              aria-selected={index === selectedIndex}\n              aria-controls={tabContent.id}\n              colorScheme=\"tertiary\"\n              onClick={() => onIndexChange(index)}\n              ref={el => {\n                tabsRef.current[index] = el;\n              }}\n              role=\"tab\"\n              tabIndex={getTabIndex(index)}\n            >\n              {tabContent.tabLabel}\n            </Button>\n          </Tab>\n        ))}\n      </Tabs>\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\"inset\">\n        <Surface id={tabsContent[selectedIndex].id} role=\"tabpanel\" style={{ minBlockSize: '200px' }}>\n          <span>{tabsContent[selectedIndex]?.text}</span>\n        </Surface>\n      </Utility>\n    </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Toggle button",
    "description": "A button component that maintains pressed/unpressed states. Supports both single-select and multi-select toggle functionality with visual state indicators.",
    "category": "Form Controls",
    "tags": [
      "toggle",
      "button",
      "pressed state",
      "single select",
      "multi select",
      "group",
      "state management",
      "visual feedback"
    ],
    "variants": [
      {
        "name": "Single-select toggle",
        "description": "A group of toggle buttons where only one can be active at a time, similar to radio button behavior",
        "code": "import { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\nimport { useState } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-toggle';\n\nconst options = [\n  { label: 'Label 1', id: `${id}-label-1`, defaultSelected: true },\n  { label: 'Label 2', id: `${id}-label-2` },\n  { label: 'Label 3', id: `${id}-label-3` },\n];\n\nexport const DefaultToggles = () => {\n  const [togglePressedState, setTogglePressedState] = useState(options.map(o => !!o.defaultSelected));\n\n  const handleSingleSelectTogglePress = (pressedIndex: number) => {\n    setTogglePressedState(options.map((_, buttonIndex) => pressedIndex === buttonIndex));\n  };\n\n  return (\n    <ToggleContainer>\n      {options.map((option, optionIndex) => (\n        <UtilityFragment key={option.id} vGap={6}>\n          <Toggle\n            tag=\"button\"\n            aria-pressed={togglePressedState[optionIndex]}\n            onClick={() => handleSingleSelectTogglePress(optionIndex)}\n          >\n            {option.label}\n          </Toggle>\n        </UtilityFragment>\n      ))}\n    </ToggleContainer>\n  );\n};"
      },
      {
        "name": "Multi-select toggle",
        "description": "A group of icon toggle buttons where multiple buttons can be pressed simultaneously for multiple selections",
        "code": "import { VisaMapLocationLow, VisaViewGridLow, VisaViewListLow } from '@visa/nova-icons-react';\nimport { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\nimport { useState } from 'react';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'multi-select-toggles';\n\nconst options = [\n  { id: `${id}-label-1`, label: 'Label 1', icon: <VisaMapLocationLow />, defaultSelected: true },\n  { id: `${id}-label-2`, label: 'Label 2', icon: <VisaViewListLow /> },\n  { id: `${id}-label-3`, label: 'Label 3', icon: <VisaViewGridLow />, defaultSelected: true },\n];\n\nexport const MultiSelectToggles = () => {\n  const [togglePressedState, setTogglePressedState] = useState(options.map(o => !!o.defaultSelected));\n\n  const handleSingleSelectTogglePress = (pressedIndex: number) => {\n    setTogglePressedState(prevState => {\n      return prevState.map((buttonSelected, buttonIndex) =>\n        pressedIndex === buttonIndex ? !buttonSelected : buttonSelected\n      );\n    });\n  };\n\n  return (\n    <ToggleContainer>\n      {options.map((option, optionIndex) => (\n        <UtilityFragment key={option.id} vGap={6}>\n          <Toggle\n            tag=\"button\"\n            aria-label={option.label}\n            aria-pressed={togglePressedState[optionIndex]}\n            onClick={() => handleSingleSelectTogglePress(optionIndex)}\n          >\n            {option.icon}\n          </Toggle>\n        </UtilityFragment>\n      ))}\n    </ToggleContainer>\n  );\n};"
      }
    ]
  },
  {
    "component": "Tooltip",
    "description": "A contextual popup component that displays additional information when users hover over or focus on an element. Provides accessible supplementary content.",
    "category": "Feedback",
    "tags": [
      "tooltip",
      "popup",
      "contextual",
      "hover",
      "focus",
      "information",
      "accessible",
      "supplementary",
      "positioning"
    ],
    "variants": [
      {
        "name": "Top positioned tooltip",
        "description": "A contextual information popup that appears above the trigger element on hover or focus interactions",
        "code": "import {\n  offset,\n  safePolygon,\n  useDismiss,\n  useFloating,\n  useFocus,\n  useHover,\n  useInteractions,\n  useRole,\n} from '@floating-ui/react';\nimport { Button, Tooltip, Utility } from '@visa/nova-react';\nimport { useState } from 'react';\n\nexport const TopTooltip = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { x, y, strategy, refs, context } = useFloating({\n    middleware: [offset(2)],\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    placement: 'top',\n  });\n\n  const dismiss = useDismiss(context);\n  const focus = useFocus(context);\n  const hover = useHover(context, { handleClose: safePolygon(), move: false });\n  const role = useRole(context, { role: 'tooltip' });\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, focus, hover, role]);\n\n  return (\n    <Utility vFlex vJustifyContent=\"center\" vMargin={24}>\n      <Button ref={refs.setReference} {...getReferenceProps()}>\n        Primary action\n      </Button>\n      {isOpen && (\n        <Tooltip\n          ref={refs.setFloating}\n          style={{\n            left: x,\n            position: strategy,\n            top: y,\n            width: 'fit-content',\n          }}\n          {...getFloatingProps()}\n        >\n          This is a tooltip\n        </Tooltip>\n      )}\n    </Utility>\n  );\n};"
      }
    ]
  },
  {
    "component": "Vertical navigation",
    "description": "A contextual popup component that displays additional information when users hover over or focus on an element. Provides accessible supplementary content.",
    "category": "Feedback",
    "tags": [
      "vertical nav",
      "sidebar",
      "navigation",
      "left nav",
      "menu",
      "collapse",
      "drawer",
      "primary nav",
      "hierarchical"
    ],
    "variants": [
      {
        "name": "Vertical Navigation",
        "description": "A full-featured collapsible sidebar navigation with app branding, hierarchical menu structure, user account section, and expand/collapse functionality",
        "code": "import {\n  VisaAccountTiny,\n  VisaChevronDownTiny,\n  VisaChevronUpTiny,\n  VisaMediaFastForwardTiny,\n  VisaMediaRewindTiny,\n} from '@visa/nova-icons-react';\nimport {\n  Button,\n  Divider,\n  Link,\n  Nav,\n  NavAppName,\n  Tab,\n  TabSuffix,\n  Tabs,\n  Typography,\n  Utility,\n  UtilityFragment,\n  VisaLogo,\n} from '@visa/nova-react';\nimport { useState } from 'react';\nimport Styles from './styles.module.scss';\n\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\nconst id = 'default-vertical-navigation';\nconst navRegionAriaLabel = 'Default vertical navigation';\n\nconst tabsContent = [\n  {\n    tabLabel: 'L1 label 1',\n    id: `${id}-tab-0`,\n    href: './vertical-navigation',\n  },\n  {\n    tabLabel: 'L1 label 2',\n    id: `${id}-tab-1`,\n    href: './vertical-navigation',\n  },\n  {\n    tabLabel: 'L1 label 3',\n    id: `${id}-tab-2`,\n    href: './vertical-navigation',\n  },\n  {\n    tabLabel: 'L1 label 4',\n    id: `${id}-tab-3`,\n    href: './vertical-navigation',\n  },\n  {\n    tabLabel: 'L1 label 5',\n    id: `${id}-tab-4`,\n    href: './vertical-navigation',\n  },\n];\n\nconst accountSubItems = [\n  {\n    tabLabel: 'L2 label 1',\n    id: `${id}-account-sub-item-0`,\n    href: './vertical-navigation',\n  },\n  {\n    tabLabel: 'L2 label 2',\n    id: `${id}-account-sub-item-1`,\n    href: './vertical-navigation',\n  },\n];\n\n/*\n * Styles for the application container and main content\n * -----------------------------------------------------\n * .appContainer {\n *   &:global(:has(.v-nav .v-tabs)) {\n *     // The open navigation should be 242px\n *     grid-template-columns: 242px 1fr;\n *   }\n * }\n *\n * .layoutContainer {\n *   min-block-size: 700px;\n *   display: grid;\n *   grid-template-columns: auto 1fr;\n * }\n *\n * .mainContent {\n *   background-color: whitesmoke;\n *   min-block-size: 300px;\n *   padding: 12px;\n * }\n */\n\nexport const DefaultVerticalNavigation = () => {\n  const [navExpanded, setNavExpanded] = useState(true);\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\n\n  return (\n    <div className={Styles.appContainer}>\n      <div id=\"layout\" className={Styles.layoutContainer}>\n        <Nav id={id} orientation=\"vertical\" tag=\"header\">\n          {navExpanded && (\n            <Link skipLink href=\"#content\">\n              Skip to content\n            </Link>\n          )}\n          {navExpanded && (\n            <>\n              <UtilityFragment\n                vFlex\n                vFlexCol\n                vGap={12}\n                vMarginTop={16}\n                vMarginRight={16}\n                vMarginBottom={30}\n                vMarginLeft={20}\n              >\n                <Link\n                  aria-label=\"Visa Application Name Home\"\n                  href=\"https://www.visa.com\"\n                  id={`${id}-home-link`}\n                  noUnderline\n                  style={{ backgroundColor: 'transparent' }}\n                >\n                  <VisaLogo />\n                  <NavAppName>\n                    <Typography variant=\"subtitle-1\">Application Name</Typography>\n                  </NavAppName>\n                </Link>\n              </UtilityFragment>\n              <nav aria-label={navRegionAriaLabel}>\n                <UtilityFragment vGap={8}>\n                  <Tabs orientation=\"vertical\">\n                    {tabsContent.map(tabContent => (\n                      <Tab key={tabContent.id}>\n                        <Button\n                          colorScheme=\"tertiary\"\n                          element={<a href=\"./vertical-navigation\">{tabContent.tabLabel}</a>}\n                        />\n                      </Tab>\n                    ))}\n                  </Tabs>\n                </UtilityFragment>\n              </nav>\n            </>\n          )}\n          <Utility vFlex vFlexCol vAlignSelf=\"stretch\" vGap={4} vMarginTop=\"auto\">\n            {navExpanded && (\n              <>\n                <Divider dividerType=\"decorative\" />\n                <Tab tag=\"div\">\n                  <Button\n                    aria-expanded={accountTabOpen}\n                    aria-controls={`${id}-account-sub-menu`}\n                    aria-label=\"Alex Miller\"\n                    buttonSize=\"large\"\n                    colorScheme=\"tertiary\"\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\n                  >\n                    <VisaAccountTiny />\n                    Alex Miller\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\n                  </Button>\n                  <UtilityFragment vHide={!accountTabOpen}>\n                    <Tabs orientation=\"vertical\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\n                      {accountSubItems.map(accountSubItem => (\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\n                          <Button\n                            colorScheme=\"tertiary\"\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\n                          />\n                        </Tab>\n                      ))}\n                    </Tabs>\n                  </UtilityFragment>\n                </Tab>\n              </>\n            )}\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\n              <Button\n                aria-label=\"Side bar\"\n                aria-expanded={!!navExpanded}\n                buttonSize=\"small\"\n                colorScheme=\"tertiary\"\n                iconButton\n                onClick={() => setNavExpanded(!navExpanded)}\n                subtle\n              >\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\n              </Button>\n            </UtilityFragment>\n          </Utility>\n        </Nav>\n        <div className={Styles.mainContent}>\n          <Typography>Main Content</Typography>\n        </div>\n      </div>\n    </div>\n  );\n};"
      }
    ]
  }
]